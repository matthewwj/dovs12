/*let test_nested_while_loop_break = [
  Ast.VarDeclStm (DeclBlock [
    Declaration {
      name = Ast.Ident {name = "x"};
      tp = Some Ast.Int;
      body = Ast.Integer {int = 5L};
    };
  ]);
  
  Ast.WhileStm {
    cond = Ast.BinOp {
      left = Ast.Lval (Ast.Var (Ast.Ident {name = "x"}));
      op = Ast.Gt;
      right = Ast.Integer {int = 0L};
    };
    body = Ast.CompoundStm {
      stms = [
        Ast.WhileStm {
          cond = Ast.BinOp {
            left = Ast.Lval (Ast.Var (Ast.Ident {name = "x"}));
            op = Ast.Eq;
            right = Ast.Integer {int = 3L};
          };
          body = Ast.BreakStm;
        };
        Ast.ExprStm {
          expr = Some (Ast.Assignment {
            lvl = Ast.Var (Ast.Ident {name = "x"});
            rhs = Ast.BinOp {
              left = Ast.Lval (Ast.Var (Ast.Ident {name = "x"}));
              op = Ast.Minus;
              right = Ast.Integer {int = 1L};
            };
          });
        };
      ];
    };
  };
  Ast.ReturnStm {
    ret = Ast.Lval (Ast.Var (Ast.Ident {name = "x"}));
  }
]*/